/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AluminiumCan as PrismaAluminiumCan } from "@prisma/client";

export class AluminiumCanServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AluminiumCanCountArgs, "select">
  ): Promise<number> {
    return this.prisma.aluminiumCan.count(args);
  }

  async aluminiumCans(
    args: Prisma.AluminiumCanFindManyArgs
  ): Promise<PrismaAluminiumCan[]> {
    return this.prisma.aluminiumCan.findMany(args);
  }
  async aluminiumCan(
    args: Prisma.AluminiumCanFindUniqueArgs
  ): Promise<PrismaAluminiumCan | null> {
    return this.prisma.aluminiumCan.findUnique(args);
  }
  async createAluminiumCan(
    args: Prisma.AluminiumCanCreateArgs
  ): Promise<PrismaAluminiumCan> {
    return this.prisma.aluminiumCan.create(args);
  }
  async updateAluminiumCan(
    args: Prisma.AluminiumCanUpdateArgs
  ): Promise<PrismaAluminiumCan> {
    return this.prisma.aluminiumCan.update(args);
  }
  async deleteAluminiumCan(
    args: Prisma.AluminiumCanDeleteArgs
  ): Promise<PrismaAluminiumCan> {
    return this.prisma.aluminiumCan.delete(args);
  }
}
