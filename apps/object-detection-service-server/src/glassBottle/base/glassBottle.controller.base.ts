/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GlassBottleService } from "../glassBottle.service";
import { GlassBottleCreateInput } from "./GlassBottleCreateInput";
import { GlassBottle } from "./GlassBottle";
import { GlassBottleFindManyArgs } from "./GlassBottleFindManyArgs";
import { GlassBottleWhereUniqueInput } from "./GlassBottleWhereUniqueInput";
import { GlassBottleUpdateInput } from "./GlassBottleUpdateInput";

export class GlassBottleControllerBase {
  constructor(protected readonly service: GlassBottleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GlassBottle })
  async createGlassBottle(
    @common.Body() data: GlassBottleCreateInput
  ): Promise<GlassBottle> {
    return await this.service.createGlassBottle({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GlassBottle] })
  @ApiNestedQuery(GlassBottleFindManyArgs)
  async glassBottles(@common.Req() request: Request): Promise<GlassBottle[]> {
    const args = plainToClass(GlassBottleFindManyArgs, request.query);
    return this.service.glassBottles({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GlassBottle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async glassBottle(
    @common.Param() params: GlassBottleWhereUniqueInput
  ): Promise<GlassBottle | null> {
    const result = await this.service.glassBottle({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GlassBottle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGlassBottle(
    @common.Param() params: GlassBottleWhereUniqueInput,
    @common.Body() data: GlassBottleUpdateInput
  ): Promise<GlassBottle | null> {
    try {
      return await this.service.updateGlassBottle({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GlassBottle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGlassBottle(
    @common.Param() params: GlassBottleWhereUniqueInput
  ): Promise<GlassBottle | null> {
    try {
      return await this.service.deleteGlassBottle({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
