/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GlassBottle } from "./GlassBottle";
import { GlassBottleCountArgs } from "./GlassBottleCountArgs";
import { GlassBottleFindManyArgs } from "./GlassBottleFindManyArgs";
import { GlassBottleFindUniqueArgs } from "./GlassBottleFindUniqueArgs";
import { CreateGlassBottleArgs } from "./CreateGlassBottleArgs";
import { UpdateGlassBottleArgs } from "./UpdateGlassBottleArgs";
import { DeleteGlassBottleArgs } from "./DeleteGlassBottleArgs";
import { GlassBottleService } from "../glassBottle.service";
@graphql.Resolver(() => GlassBottle)
export class GlassBottleResolverBase {
  constructor(protected readonly service: GlassBottleService) {}

  async _glassBottlesMeta(
    @graphql.Args() args: GlassBottleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GlassBottle])
  async glassBottles(
    @graphql.Args() args: GlassBottleFindManyArgs
  ): Promise<GlassBottle[]> {
    return this.service.glassBottles(args);
  }

  @graphql.Query(() => GlassBottle, { nullable: true })
  async glassBottle(
    @graphql.Args() args: GlassBottleFindUniqueArgs
  ): Promise<GlassBottle | null> {
    const result = await this.service.glassBottle(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GlassBottle)
  async createGlassBottle(
    @graphql.Args() args: CreateGlassBottleArgs
  ): Promise<GlassBottle> {
    return await this.service.createGlassBottle({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => GlassBottle)
  async updateGlassBottle(
    @graphql.Args() args: UpdateGlassBottleArgs
  ): Promise<GlassBottle | null> {
    try {
      return await this.service.updateGlassBottle({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GlassBottle)
  async deleteGlassBottle(
    @graphql.Args() args: DeleteGlassBottleArgs
  ): Promise<GlassBottle | null> {
    try {
      return await this.service.deleteGlassBottle(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
