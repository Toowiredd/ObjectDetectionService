/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { Pet1PlasticBottleService } from "../pet1PlasticBottle.service";
import { Pet1PlasticBottleCreateInput } from "./Pet1PlasticBottleCreateInput";
import { Pet1PlasticBottle } from "./Pet1PlasticBottle";
import { Pet1PlasticBottleFindManyArgs } from "./Pet1PlasticBottleFindManyArgs";
import { Pet1PlasticBottleWhereUniqueInput } from "./Pet1PlasticBottleWhereUniqueInput";
import { Pet1PlasticBottleUpdateInput } from "./Pet1PlasticBottleUpdateInput";

export class Pet1PlasticBottleControllerBase {
  constructor(protected readonly service: Pet1PlasticBottleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Pet1PlasticBottle })
  async createPet1PlasticBottle(
    @common.Body() data: Pet1PlasticBottleCreateInput
  ): Promise<Pet1PlasticBottle> {
    return await this.service.createPet1PlasticBottle({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Pet1PlasticBottle] })
  @ApiNestedQuery(Pet1PlasticBottleFindManyArgs)
  async pet1PlasticBottles(
    @common.Req() request: Request
  ): Promise<Pet1PlasticBottle[]> {
    const args = plainToClass(Pet1PlasticBottleFindManyArgs, request.query);
    return this.service.pet1PlasticBottles({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Pet1PlasticBottle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pet1PlasticBottle(
    @common.Param() params: Pet1PlasticBottleWhereUniqueInput
  ): Promise<Pet1PlasticBottle | null> {
    const result = await this.service.pet1PlasticBottle({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Pet1PlasticBottle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePet1PlasticBottle(
    @common.Param() params: Pet1PlasticBottleWhereUniqueInput,
    @common.Body() data: Pet1PlasticBottleUpdateInput
  ): Promise<Pet1PlasticBottle | null> {
    try {
      return await this.service.updatePet1PlasticBottle({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Pet1PlasticBottle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePet1PlasticBottle(
    @common.Param() params: Pet1PlasticBottleWhereUniqueInput
  ): Promise<Pet1PlasticBottle | null> {
    try {
      return await this.service.deletePet1PlasticBottle({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
