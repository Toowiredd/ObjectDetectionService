/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, MilkCarton as PrismaMilkCarton } from "@prisma/client";

export class MilkCartonServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MilkCartonCountArgs, "select">
  ): Promise<number> {
    return this.prisma.milkCarton.count(args);
  }

  async milkCartons(
    args: Prisma.MilkCartonFindManyArgs
  ): Promise<PrismaMilkCarton[]> {
    return this.prisma.milkCarton.findMany(args);
  }
  async milkCarton(
    args: Prisma.MilkCartonFindUniqueArgs
  ): Promise<PrismaMilkCarton | null> {
    return this.prisma.milkCarton.findUnique(args);
  }
  async createMilkCarton(
    args: Prisma.MilkCartonCreateArgs
  ): Promise<PrismaMilkCarton> {
    return this.prisma.milkCarton.create(args);
  }
  async updateMilkCarton(
    args: Prisma.MilkCartonUpdateArgs
  ): Promise<PrismaMilkCarton> {
    return this.prisma.milkCarton.update(args);
  }
  async deleteMilkCarton(
    args: Prisma.MilkCartonDeleteArgs
  ): Promise<PrismaMilkCarton> {
    return this.prisma.milkCarton.delete(args);
  }
}
