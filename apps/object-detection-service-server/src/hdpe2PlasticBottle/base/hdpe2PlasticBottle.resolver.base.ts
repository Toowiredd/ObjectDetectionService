/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Hdpe2PlasticBottle } from "./Hdpe2PlasticBottle";
import { Hdpe2PlasticBottleCountArgs } from "./Hdpe2PlasticBottleCountArgs";
import { Hdpe2PlasticBottleFindManyArgs } from "./Hdpe2PlasticBottleFindManyArgs";
import { Hdpe2PlasticBottleFindUniqueArgs } from "./Hdpe2PlasticBottleFindUniqueArgs";
import { DeleteHdpe2PlasticBottleArgs } from "./DeleteHdpe2PlasticBottleArgs";
import { Hdpe2PlasticBottleService } from "../hdpe2PlasticBottle.service";
@graphql.Resolver(() => Hdpe2PlasticBottle)
export class Hdpe2PlasticBottleResolverBase {
  constructor(protected readonly service: Hdpe2PlasticBottleService) {}

  async _hdpe2PlasticBottlesMeta(
    @graphql.Args() args: Hdpe2PlasticBottleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Hdpe2PlasticBottle])
  async hdpe2PlasticBottles(
    @graphql.Args() args: Hdpe2PlasticBottleFindManyArgs
  ): Promise<Hdpe2PlasticBottle[]> {
    return this.service.hdpe2PlasticBottles(args);
  }

  @graphql.Query(() => Hdpe2PlasticBottle, { nullable: true })
  async hdpe2PlasticBottle(
    @graphql.Args() args: Hdpe2PlasticBottleFindUniqueArgs
  ): Promise<Hdpe2PlasticBottle | null> {
    const result = await this.service.hdpe2PlasticBottle(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Hdpe2PlasticBottle)
  async deleteHdpe2PlasticBottle(
    @graphql.Args() args: DeleteHdpe2PlasticBottleArgs
  ): Promise<Hdpe2PlasticBottle | null> {
    try {
      return await this.service.deleteHdpe2PlasticBottle(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
